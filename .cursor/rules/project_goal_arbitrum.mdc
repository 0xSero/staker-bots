---
description: 
globs: 
alwaysApply: false
---
# Arbitrum Staker Bot Refactoring Goals

## Primary Objective

Refactor the Arbitrum staker bot implementation to align with the architecture, code quality, and conventions established in the Obol staker bot implementation, which serves as the reference.

## Detailed Goals

### 1. Architecture Alignment âœ…

- Implement a clean component architecture matching Obol:
  - **Monitor**: For tracking on-chain events âœ…
  - **Profitability**: For analyzing profitable actions âœ…
  - **Executor**: For executing transactions âœ…
  - **Database**: For persistent storage âœ…
  - **Configuration**: For environment and settings management âœ…

- Evaluate the purpose of the `calculator` component: âœ…
  - Refactored to align with the functional programming patterns
  - Maintained as separate component due to its specific role in the Arbitrum implementation

- Ensure clear separation of concerns between components âœ…

### 2. Directory Structure Standardization âœ…

Aligned the Arbitrum directory structure with Obol:

```
arbitrum/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ configuration/       # Added and implemented âœ…
â”‚   â”œâ”€â”€ database/            # Standardized interfaces and implementations âœ…
â”‚   â”œâ”€â”€ executor/            # Aligned with Obol's interface âœ…
â”‚   â”œâ”€â”€ monitor/             # Aligned with Obol's implementation âœ…
â”‚   â”œâ”€â”€ calculator/          # Maintained but refactored to follow standards âœ…
â”‚   â”œâ”€â”€ profitability/       # Updated to match Obol's approach âœ…
â”‚   â””â”€â”€ tests/               # Enhanced test coverage and organization âœ…
â”‚       â””â”€â”€ integration/     # Added integration tests directory âœ…
```

### 3. Code Style and Standards âœ…

Applied consistent coding standards across the codebase:

- Used functional programming patterns (avoided classes where possible) âœ…
- Used explicit `function` keyword for function declarations âœ…
- Implemented RORO (Receive Object, Return Object) pattern âœ…
- Applied proper error handling with early returns and guard clauses âœ…
- Maintained consistent naming conventions âœ…
- Used TypeScript interfaces for type definitions âœ…
- Followed the error handling and validation guidelines from custom instructions âœ…

### 4. Documentation Enhancement ðŸ”„

- Updating `arbitrum/README.md` to match the detail level in `obol/README.md` ðŸ”„
- Will include:
  - System overview
  - Architecture diagrams
  - Component descriptions
  - Configuration guide
  - Setup and running instructions
  - Health checks and maintenance information

### 5. Build and Run Script Standardization âœ…

- Updated `package.json` scripts to match Obol: âœ…
  - `build`: For compiling TypeScript
  - `start` or `prod`: For production execution
  - `dev`: For development mode
  - Health check and utility scripts

- Implemented component selection via environment variables: âœ…
  ```
  COMPONENTS=monitor,profitability pnpm run prod
  ```

### 6. Dependency Management âœ…

- Audited dependencies in `package.json` âœ…
- Updated versions to match Obol where appropriate âœ…
- Removed unused dependencies âœ…
- Ensured consistent use of libraries across the monorepo âœ…

### 7. Testing Strategy âœ…

- Enhanced test coverage to match Obol âœ…
- Focused on integration tests over unit tests where appropriate âœ…
- Tested with real functions (no mocking) âœ…
- Ensured tests follow the project's coding standards âœ…

## Implementation Progress

1. âœ… Completed comprehensive code review of both implementations
2. âœ… Identified gaps and inconsistencies between Arbitrum and Obol
3. âœ… Created detailed refactoring plan with specific tasks
4. âœ… Implemented changes incrementally, starting with structure then moving to functionality
5. ðŸ”„ Updating documentation 
6. âœ… Verified consistency with test coverage

## Success Criteria

The Arbitrum implementation has been successfully refactored with:

1. âœ… Aligned architectural patterns with Obol
2. âœ… Directory structure matching the Obol standard
3. âœ… Code following the project's functional programming conventions
4. ðŸ”„ Documentation updates in progress
5. âœ… Tests providing adequate coverage of functionality
6. âœ… All scripts and configurations standardized
7. âœ… Codebase passing comprehensive review against the project's coding standards
