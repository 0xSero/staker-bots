---
description: 
globs: 
alwaysApply: false
---
# Arbitrum Staker Bot Refactoring Goals

## Primary Objective

Refactor the Arbitrum staker bot implementation to align with the architecture, code quality, and conventions established in the Obol staker bot implementation, which serves as the reference.

## Detailed Goals

### 1. Architecture Alignment

- Implement a clean component architecture matching Obol:
  - **Monitor**: For tracking on-chain events
  - **Profitability**: For analyzing profitable actions
  - **Executor**: For executing transactions
  - **Database**: For persistent storage
  - **Configuration**: For environment and settings management

- Evaluate the purpose of the `calculator` component:
  - If functionality is necessary, ensure it's properly integrated into the standard architecture
  - If redundant, migrate its functionality to the appropriate components (likely `profitability`)

- Ensure clear separation of concerns between components

### 2. Directory Structure Standardization

Align the Arbitrum directory structure with Obol:

```
arbitrum/
├── src/
│   ├── configuration/       # Add this directory for config management
│   ├── database/            # Standardize interfaces and implementations
│   ├── executor/            # Ensure consistent interface with Obol
│   ├── monitor/             # Align with Obol's implementation
│   ├── prices/              # Move from shared/price-feeds to match Obol
│   ├── profitability/       # Update to match Obol's approach
│   └── tests/               # Enhance test coverage and organization
│       └── integration/     # Add integration tests directory
```

### 3. Code Style and Standards

Apply consistent coding standards across the codebase:

- Use functional programming patterns (avoid classes where possible)
- Use explicit `function` keyword for function declarations
- Implement RORO (Receive Object, Return Object) pattern
- Apply proper error handling with early returns and guard clauses
- Maintain consistent naming conventions
- Use TypeScript interfaces for type definitions
- Follow the error handling and validation guidelines from custom instructions

### 4. Documentation Enhancement

- Update `arbitrum/README.md` to match the detail level in `obol/README.md`
- Include:
  - System overview
  - Architecture diagrams
  - Component descriptions
  - Configuration guide
  - Setup and running instructions
  - Health checks and maintenance information

### 5. Build and Run Script Standardization

- Update `package.json` scripts to match Obol:
  - `build`: For compiling TypeScript
  - `start` or `prod`: For production execution
  - `dev`: For development mode
  - Health check and utility scripts

- Implement component selection via environment variables:
  ```
  COMPONENTS=monitor,profitability pnpm run prod
  ```

### 6. Dependency Management

- Audit dependencies in `package.json`
- Update versions to match Obol where appropriate
- Remove unused dependencies
- Ensure consistent use of libraries across the monorepo

### 7. Testing Strategy

- Enhance test coverage to match Obol
- Focus on integration tests over unit tests where appropriate
- Test with real functions (no mocking)
- Ensure tests follow the project's coding standards

## Implementation Approach

1. Start with a comprehensive code review of both implementations
2. Identify gaps and inconsistencies between Arbitrum and Obol
3. Create a detailed refactoring plan with specific tasks
4. Implement changes incrementally, starting with structure then moving to functionality
5. Update documentation throughout the process
6. Verify consistency with test coverage

## Success Criteria

The Arbitrum implementation will be considered successfully refactored when:

1. It follows the same architectural patterns as Obol
2. Directory structure matches the Obol standard
3. Code follows the project's functional programming conventions
4. Documentation is comprehensive and matches Obol's quality
5. Tests provide adequate coverage of functionality
6. All scripts and configurations are standardized
7. The codebase passes a comprehensive review against the project's coding standards
