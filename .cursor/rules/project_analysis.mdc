---
description: 
globs: 
alwaysApply: true
---
# Detailed Analysis of Current Setup

## System Architecture Overview

The staker-bots repository implements a modular, component-based architecture for monitoring and interacting with staking contracts on the blockchain. The system is designed to track deposits, monitor conditions, calculate profitability, and execute transactions when advantageous.

## Core Components

### 1. Monitor Component (`src/monitor/`)

**Purpose**: Tracks on-chain events related to staking activities.

**Key Classes**:
- `StakerMonitor`: Main orchestrator that polls for blockchain events
- `EventProcessor`: Processes specific events like `StakeDeposited`, `StakeWithdrawn`, and `DelegateeAltered`

**Behavior**:
- Polls the blockchain for new events at configurable intervals
- Processes events and updates the database
- Maintains checkpoints to handle restarts and network interruptions
- Emits events that can be consumed by other components

**Strengths**:
- Well-structured with clear separation of concerns
- Implements resilient polling with checkpoint system
- Uses configurable intervals and block ranges
- Handles reorgs and network disruptions gracefully

### 2. Profitability Engine (`src/profitability/`)

**Purpose**: Analyzes deposits to determine if actions would be profitable.

**Key Classes**:
- `ProfitabilityEngineWrapper`: Manages the profitability analysis workflow
- `BaseProfitabilityEngine`: Implements the core profitability calculation logic

**Behavior**:
- Receives events (currently score events from calculator)
- Analyzes deposits for profitability
- Queues profitable transactions for execution
- Uses a database-backed queue system for reliability

**Analysis**:
- Well-designed queue-based processing system
- Handles batch analysis for efficient processing
- Integrates with price feeds for token valuations
- Can be modified to work with GovLst reward claims instead of bumps

### 3. Executor Component (`src/executor/`)

**Purpose**: Executes on-chain transactions.

**Key Classes**:
- `ExecutorWrapper`: Main wrapper class for transaction execution
- `BaseExecutor`: Wallet-based implementation
- `RelayerExecutor`: OpenZeppelin Defender-based implementation

**Behavior**:
- Manages a queue of transactions to be executed
- Handles wallet management and gas optimization
- Monitors transaction statuses and handles retries
- Reports transaction outcomes

**Analysis**:
- Supports multiple execution strategies
- Implements robust queueing and retry logic
- Handles gas price optimization
- Can be used for GovLst reward claiming without modification

### 4. Database Component (`src/database/`)

**Purpose**: Provides persistent storage for system state.

**Key Classes**:
- `DatabaseWrapper`: Facade for database operations
- `IDatabase`: Interface defining database operations
- Specific implementations for Supabase and JSON storage

**Behavior**:
- Stores deposits, events, checkpoints
- Manages processing and transaction queues
- Provides data access methods for other components

**Analysis**:
- Well-designed with clear interfaces
- Supports multiple backend options (Supabase, JSON)
- Contains migration scripts for schema updates
- Can be extended to support GovLst rewards data

### 6. Shared Utilities (`src/shared/`)

**Purpose**: Provides reusable utilities across components.

**Key Features**:
- Price feeds for token price information
- Logging utilities
- Configuration management

**Analysis**:
- Price feeds will be particularly valuable for GovLst reward profitability calculations
- Logging system provides consistent monitoring
- Configuration system is easily extensible for GovLst-specific needs

## Database Schema

The current database schema includes:

1. **deposits**: Stores deposit information
   - `deposit_id`: Unique identifier
   - `owner_address`: Address of the deposit owner
   - `delegatee_address`: Address of the delegatee
   - `amount`: Amount staked

2. **processing_checkpoints**: Tracks component processing state
   - `component_type`: Type of component
   - `last_block_number`: Last processed block
   - `block_hash`: Hash of the last block
   - `last_update`: Timestamp of last update

3. **score_events**: Stores delegatee score events
   - `delegatee`: Delegatee address
   - `score`: Score value
   - `block_number`: Block number of the event

4. **processing_queue**: Manages processing queue items
   - Tracks deposit processing status
   - Stores profitability check results

5. **transaction_queue**: Manages transaction execution queue
   - Tracks transaction execution status
   - Stores transaction details

## Configuration System

The configuration is managed through:

1. **Environment Variables**: Used for sensitive data
2. **CONFIG Object**: Central configuration in `src/config.ts`
3. **Component-Specific Constants**: Defaults in component directories

## Event Processing Flow

1. **Monitor Component**: Detects on-chain events and updates database
2. **Calculator Component**: Processes score events (to be replaced)
3. **Profitability Engine**: Analyzes deposits for profitable actions
4. **Executor Component**: Executes profitable transactions

## Strengths to Leverage

1. **Modular Architecture**: Clear component separation makes replacement easier
2. **Database-Backed Queues**: Provides resilience and recovery
3. **Profitability Analysis**: Framework for token price and gas cost evaluation
4. **Transaction Execution**: Robust execution with retry and monitoring
5. **Configurable Parameters**: System designed to be highly configurable

## Areas for Extension

1. **New GovLst Database Tables**: For reward tracking and claim history
2. **Batch Optimization Logic**: For efficient reward claiming
3. **Reward Calculation**: For determining unclaimed rewards
4. **GovLst Contract Integration**: Specific logic for interacting with GovLst contracts

## Integration Approach

The GovLst rewards claimer will:

1. Replace the calculator component functionally
2. Maintain the same patterns and interfaces where possible
3. Extend the database for GovLst-specific data
4. Integrate with the existing profitability engine and executor
5. Follow the established configuration and logging approaches
